syntax = "proto3";

option java_multiple_files = true;
package org.apache.airavata.datalake.metadata.service;

import "google/api/annotations.proto";
import "common/Common.proto";
import "user/User.proto";
import "group/Group.proto";


message ResourceMetadataAPIRequest {
    Resource resource = 1;
    MetadataServiceAuthToken auth_token = 2;
    string source = 3;
}


message ResourceMetadataSharingRequest {
    repeated ResourceSharings sharings = 1;
    MetadataServiceAuthToken auth_token = 2;
    string source = 3;
}

message ResourceMetadataAPIResponse {
    bool status = 1;
}


message Resource {
    string tenant_id = 1;
    string name = 2;
    string description = 3;
    map<string, string> properties = 4;
    int64 created_at = 5;
    int64 last_modified_at = 6;
    string type = 7;
    string full_text = 8;
    string source = 9;
    repeated Resource child_resources = 10;
    string parent_resource_id = 11;
    repeated ResourceSharings sharings = 12;
}


message ResourceSharings {
    string shared_entity_id = 1;
    string shared_entity_type = 2;
    string sharing_type = 3;
    map<string, string> properties = 4;
    int64 created_at = 5;
    int64 last_modified_at = 6;
    string resource_id = 7;
    repeated User users = 8;
    repeated Group groups = 9;
}


service ResourceMetadataService {

    rpc createResource (ResourceMetadataAPIRequest) returns (ResourceMetadataAPIResponse) {
        option (google.api.http) = {
           post: "/v1.0/api/metadata/resource"
        };
    }

    rpc getResource (ResourceMetadataAPIRequest) returns (Resource) {
        option (google.api.http) = {
           get: "/v1.0/api/metadata/resource"
        };
    }

    rpc updateResource (ResourceMetadataAPIRequest) returns (ResourceMetadataAPIResponse) {
        option (google.api.http) = {
           put: "/v1.0/api/metadata/resource"
        };
    }

    rpc deleteResource (ResourceMetadataAPIRequest) returns (ResourceMetadataAPIResponse) {
        option (google.api.http) = {
           delete: "/v1.0/api/metadata/resource"
        };
    }

    rpc shareResource (ResourceMetadataSharingRequest) returns (ResourceMetadataAPIResponse) {
        option (google.api.http) = {
           post: "/v1.0/api/metadata/resource/sharings"
        };
    }

    rpc deleteSharing (ResourceMetadataSharingRequest) returns (ResourceMetadataAPIResponse) {
        option (google.api.http) = {
           delete: "/v1.0/api/metadata/resource/sharings"
        };
    }

}