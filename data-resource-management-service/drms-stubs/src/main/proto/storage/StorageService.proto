/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

option java_multiple_files = true;
package org.apache.airavata.datalake.drms.storage;

import "google/api/annotations.proto";
import "Common.proto";
import "storage/SSHStorage.proto";
import "storage/S3Storage.proto";
import "google/protobuf/empty.proto";

message AnyStorage {
  oneof storage {
    org.apache.airavata.datalake.drms.storage.ssh.SSHStorage ssh_storage = 1;
    org.apache.airavata.datalake.drms.storage.s3.S3Storage s3_storage = 2;
  }
}
message StorageFetchRequest {
  org.apache.airavata.datalake.drms.DRMSServiceAuthToken auth_token = 1;
  string storage_id = 2;
}

message StorageFetchResponse {
    AnyStorage storage = 1;
}

message StorageCreateRequest {
  org.apache.airavata.datalake.drms.DRMSServiceAuthToken auth_token = 1;
  AnyStorage storage = 2;
}

message StorageCreateResponse {
  AnyStorage storage = 1;
}

message StorageUpdateRequest {
  org.apache.airavata.datalake.drms.DRMSServiceAuthToken auth_token = 1;
  string storage_id = 2;
  AnyStorage storage = 3;
}

message StorageUpdateResponse {
  AnyStorage storage = 1;
}

message StorageDeleteRequest {
  org.apache.airavata.datalake.drms.DRMSServiceAuthToken auth_token = 1;
  string storage_id = 2;
}

message StorageSearchQuery {
  string field = 1;
  string value = 2;
  string options = 3; // LIKE, NOT, EQUALS, GREATER, LESS
}

message StorageSearchRequest {
  org.apache.airavata.datalake.drms.DRMSServiceAuthToken auth_token = 1;
  repeated StorageSearchQuery queries = 2;
}

message StorageSearchResponse {
  org.apache.airavata.datalake.drms.DRMSServiceAuthToken auth_token = 1;
  repeated AnyStorage storages = 2;
}

message AddStorageMetadataRequest {
  org.apache.airavata.datalake.drms.DRMSServiceAuthToken auth_token = 1;
  string storage_id = 2;
  string key = 3;
  string value = 4;
}

enum TransferScope {
  UNKNOWN = 0;
  GLOBAL = 1;
  USER = 2;
}

message TransferMapping {
  string id = 1;
  string user_id = 2;
  AnyStorage source_storage = 3;
  AnyStorage destination_storage = 4;
  TransferScope transfer_scope = 5;
}


message CreateTransferMappingRequest {
  org.apache.airavata.datalake.drms.DRMSServiceAuthToken auth_token = 1;
  TransferMapping transfer_mapping = 2;
}

message CreateTransferMappingResponse {
  TransferMapping transfer_mapping = 1;
}

message FindTransferMappingsRequest {
  org.apache.airavata.datalake.drms.DRMSServiceAuthToken auth_token = 1;
  string id = 2;
  TransferScope transfer_scope = 3;
}

message FindTransferMappingsResponse {
  repeated TransferMapping mappings = 1;
}

message DeleteTransferMappingRequest {
  org.apache.airavata.datalake.drms.DRMSServiceAuthToken auth_token = 1;
  string id = 2;
}

service StorageService {

  rpc fetchStorage (StorageFetchRequest) returns (StorageFetchResponse) {
    option (google.api.http) = {
      get: "/v1.0/api/drms/storage"
    };
  }

  rpc createStorage (StorageCreateRequest) returns (StorageCreateResponse) {
    option (google.api.http) = {
      post: "/v1.0/api/drms/storage"
    };
  }

  rpc updateStorage (StorageUpdateRequest) returns (StorageUpdateResponse) {
    option (google.api.http) = {
      put: "/v1.0/api/drms/storage"
    };
  }

  rpc deleteStorage (StorageDeleteRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1.0/api/drms/storage"
    };
  }

  rpc searchStorage (StorageSearchRequest) returns (StorageSearchResponse) {
    option (google.api.http) = {
      post: "/v1.0/api/drms/storage/search"
    };
  }

  rpc addStorageMetadata(AddStorageMetadataRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1.0/api/drms/storage/metadata"
    };
  }

  rpc createTransferMapping (CreateTransferMappingRequest) returns (CreateTransferMappingResponse) {
    option (google.api.http) = {
      post: "/v1.0/api/drms/storagePreference/transferMapping"
    };
  }

  rpc getTransferMappings (FindTransferMappingsRequest) returns (FindTransferMappingsResponse) {
    option (google.api.http) = {
      get: "/v1.0/api/drms/storagePreference/transferMapping"
    };
  }

  rpc deleteTransferMappings (DeleteTransferMappingRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1.0/api/drms/storagePreference/transferMapping"
    };
  }
}