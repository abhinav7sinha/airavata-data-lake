/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

option java_multiple_files = true;
package org.apache.airavata.datalake.drms.groups;

import "google/api/annotations.proto";
import "group/Group.proto";
import "Common.proto";

message FetchCurrentUserRequest {
    org.apache.airavata.datalake.drms.DRMSServiceAuthToken authToken = 1;
}

message FetchCurrentUserResponse {
    User user = 1;
}

message FetchUserRequest {
    org.apache.airavata.datalake.drms.DRMSServiceAuthToken authToken = 1;
    string userId = 2;
}

message FetchUserResponse {
    User user = 1;
}

message FetchCurrentUserGroupsRequest {
    org.apache.airavata.datalake.drms.DRMSServiceAuthToken authToken = 1;
}

message FetchCurrentUserGroupsResponse {
    repeated Group groups = 1;
}

message FetchUserGroupsRequest {
    org.apache.airavata.datalake.drms.DRMSServiceAuthToken authToken = 1;
    string userId = 2;
}

message FetchUserGroupsResponse {
    repeated Group groups = 1;
}

service GroupService {

    rpc fetchCurrentUser(FetchCurrentUserRequest) returns (FetchCurrentUserResponse) {
        option (google.api.http) = {
            get: "/v1.0/api/currentuser"
        };
    }

    rpc fetchUser (FetchUserRequest) returns (FetchUserResponse) {
        option (google.api.http) = {
            get: "/v1.0/api/user"
        };
    }

    rpc fetchUserGroups (FetchUserGroupsRequest) returns (FetchUserGroupsResponse) {
        option (google.api.http) = {
            get: "/v1.0/api/usergroups"
        };
    }

    rpc fetchCurrentUserGroups (FetchCurrentUserGroupsRequest) returns (FetchCurrentUserGroupsResponse) {
        option (google.api.http) = {
            get: "/v1.0/api/currentusergroups"
        };
    }
}